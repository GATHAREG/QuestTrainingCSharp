


Access Modifiers

private: Restricts access to the class or members within the same class.
protected: Allows access within the same class and derived classes.
public: Grants access to all classes and assemblies.
internal: Limits access to within the same assembly.

Types and Type Modifiers

abstract: Defines a class or method intended for inheritance, not instantiation.
bool: Represents a Boolean value (true or false).
byte: Defines an 8-bit unsigned integer.
char: Represents a single 16-bit Unicode character.
class: Declares a reference type that can contain members like methods and properties.
const: Defines a compile-time constant field or local variable.
decimal: Represents a 128-bit precise decimal value with a high precision.
delegate: Defines a reference type that encapsulates a method with a specific signature.
double: Defines a 64-bit floating-point number.
enum: Declares a distinct set of named constants.
event: Defines a delegate-based publisher-subscriber model for notifying listeners.
explicit: Requires explicit casting for conversions between types.
extern: Declares an external method, often used with P/Invoke.
float: Represents a 32-bit floating-point number.
int: Defines a 32-bit signed integer.
interface: Declares a contract that classes or structs can implement.
long: Defines a 64-bit signed integer.
namespace: Organizes code into a named scope to prevent naming conflicts.
object: Represents the base class for all types in C#.
operator: Allows custom operators for user-defined types.
override: Replaces a base class method in a derived class.
readonly: Defines a field that can only be assigned during declaration or in a constructor.
sealed: Prevents a class from being inherited.
short: Defines a 16-bit signed integer.
sbyte: Defines an 8-bit signed integer.
static: Declares a member that belongs to the type itself, not an instance.
string: Represents a sequence of characters.
struct: Declares a value type that can contain members.
uint: Defines a 32-bit unsigned integer.
ulong: Defines a 64-bit unsigned integer.
ushort: Defines a 16-bit unsigned integer.
void: Specifies that a method does not return a value.

Control Flow

as: Performs a type conversion that returns null if it fails.
base: Refers to the base class of a derived class.
break: Exits a loop or switch statement.
case: Defines a branch in a switch statement.
catch: Handles exceptions in a try block.
checked: Checks for overflow in arithmetic operations.
continue: Skips the current loop iteration and moves to the next.
default: Specifies the default case in a switch or sets default values.
do: Begins a do-while loop that executes at least once.
else: Specifies an alternative branch in an if statement.
finally: Executes code after a try block, regardless of whether an exception occurred.
fixed: Pins an object in memory for direct pointer access.
for: Starts a for loop with initializer, condition, and iterator.
foreach: Iterates over elements in a collection.
goto: Transfers control to a labeled statement.
if: Begins a conditional statement.
in: Used in foreach loops or as a parameter modifier for read-only references.
is: Checks if an object is of a specific type.
lock: Ensures exclusive access to a resource in multithreading.
new: Creates an instance of a type or hides a base class member.
null: Represents a null reference.
out: Passes an argument by reference, allowing it to be assigned in a method.
params: Allows a variable number of parameters in a method.
ref: Passes an argument by reference, allowing modifications.
return: Exits a method and optionally returns a value.
sizeof: Gets the size of a value type in bytes.
stackalloc: Allocates memory on the stack for a fixed array.
switch: Defines a multi-branch decision statement.
this: Refers to the current instance of a class.
throw: Throws an exception.
try: Wraps code that might throw exceptions.
unchecked: Disables overflow checking for arithmetic operations.
unsafe: Declares a block of code that uses pointers.
using: Imports namespaces or manages resource disposal.
virtual: Allows a method to be overridden in a derived class.
while: Begins a while loop with a condition.

Literals

false: Represents the Boolean value false.
true: Represents the Boolean value true.

Contextual Keywords

add: Declares an event accessor to add event handlers.
alias: Defines a different name for a type or namespace.
ascending: Sorts a query in ascending order.
async: Marks a method for asynchronous operations.
await: Suspends an async method until the awaited task completes.
by: Groups elements in a LINQ query.
descending: Sorts a query in descending order.
dynamic: Bypasses static type checking for a variable.
equals: Compares two objects for equality in LINQ queries.
from: Starts a LINQ query and specifies the data source.
get: Defines a property or indexer accessor.
global: Accesses global namespace members.
group: Groups results in a LINQ query.
init: Defines an initializer-only setter.
into: Continues a LINQ query after a group or select clause.
join: Combines two sequences in a LINQ query.
let: Assigns a variable in a LINQ query.
managed: Specifies the managed calling convention for function pointers.
nameof: Gets the name of a symbol as a string.
nint: Represents a native-sized integer.
not: Inverts a Boolean value in pattern matching.
notnull: Specifies that a type cannot be null.
nuint: Represents a native-sized unsigned integer.
on: Defines join conditions in LINQ.
or: Combines conditions in pattern matching.
orderby: Sorts results in a LINQ query.
partial: Splits a type or method definition across multiple files.
record: Declares an immutable reference type with value-based equality.
remove: Declares an event accessor to remove event handlers.
required: Specifies that a property must be set during object initialization.
scoped: Marks a type for scoped usage.
select: Specifies the output in a LINQ query.
set: Defines a property or indexer setter.
unmanaged: Marks a generic type as usable only with unmanaged types.
value: Represents a propertyâ€™s assigned value in a set accessor.
var: Allows implicit type inference for local variables.
when: Adds a condition in pattern matching or generic constraints.
where: Adds conditions in LINQ queries or generic constraints.
with: Creates a modified copy of a record type.
yield: Returns each value from an iterator method.


Special Use Keywords
__arglist: Defines a variable-length argument list.
__makeref: Creates a typed reference.
__reftype: Retrieves the type of a typed reference.
__refvalue: Extracts a value from a typed reference.