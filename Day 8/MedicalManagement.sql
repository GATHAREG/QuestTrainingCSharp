/*You are tasked with creating a Medical Store Management System for a local pharmacy. The system needs to track various aspects such as medications, suppliers, sales, inventory, and customers. The system should also provide functionalities to manage inventory, process customer purchases, and generate reports. Your database should be well-structured, containing several tables such as medications, suppliers, sales, inventory, and customers.
Here are the requirements and some common query operations that the medical store owner needs:
Entities and Tables:
Medications:
Stores details about the drugs or medical products available in the store.
Fields: id, name, category, price, expiry_date, supplier_id, stock_quantity.
Suppliers:
Stores information about the suppliers who supply medications.
Fields: id, name, contact_person, phone, email, address.
Customers:
Stores details about the customers who purchase medications.
Fields: id, name, phone, email, address.
Sales:
Stores information about the sales transactions that take place.
Fields: id, customer_id, medication_id, quantity, sale_date, total_price.
Inventory:
Tracks the medications and their stock levels.
Fields: id, medication_id, supplier_id, stock_in, stock_out, date_added.

Application-Level Questions:
1. Insert Operation (Basic Data Entry):
Insert details about new medications into the medications table.
Insert information about new suppliers into the suppliers table.
Insert a new customer record into the customers table.
Query Examples:
Q1: Write an INSERT query to add a new medication, "Paracetamol", to the medications table with a price of 2.50 per unit and a stock quantity of 100.
Q2: Write an INSERT query to add a new supplier "HealthCorp" into the suppliers table.
Q3: Write an INSERT query to register a new customer with the name "John Doe" and contact details in the customers table.

2. Update Operation (Stock Management):
Update the stock level of medications as new shipments come in or after a sale.
3. Join Operations (Viewing Relationships Between Data):
Display a list of medications along with their supplier details.
Query Examples:
Q6: Write a JOIN query to list all medications and their corresponding supplier names.
Q7: Write a query to display the sales data, including the medication name, customer name, and the total amount of the sale.

4. Select and Filter Operations (Sales Tracking):
Track sales and filter them by customer, date, or medication.
Query Examples:
Q8: Write a SELECT query to retrieve all sales made in the last 30 s
Q9: Write a SELECT query to retrieve sales details for a customer named "Alice Smith."
Q10: Write a query to retrieve all medications that will expire within the next 60 days.

5. Aggregate Operations (Reports and Summaries):
Generate reports such as total sales in a month or stock summary.
Query Examples:
Q11: Write a query to calculate the total revenue generated by sales in the month of September.
Q12: Write a query to get the total quantity of each medication sold (group by medication).
Q13: Write a query to count the total number of customers who have made purchases.

6. Delete Operation (Removing Old Data):
Delete expired medications from the inventory.
Query Examples:
Q14: Write a DELETE query to remove all medications that have expired as of today.
Q15: Write a query to delete a customer who has requested to be removed from the database.

7. Transaction Management (Sales and Stock Update):
When a sale is processed, ensure that the stock quantity is reduced accordingly, and the sale is recorded.
Scenario: When a customer purchases a medication, the following operations should be performed:
Insert a new record into the sales table.
Update the medications table to reduce the stock quantity of the purchased medication.
has context menu  */
use NewDb;
---table creation--
create table customers(
     id int primary key identity,
	 name varchar(50)not null,
	 phone_number varchar(20),
	 email varchar(50) not null unique,
	 address varchar(100)  
   )
create table suppliers(
    id int primary key identity,
	name varchar(50)not null,
	 phone_number varchar(20),
	 email varchar(50) not null unique,
	 address varchar(100),
	 contact_person varchar(50)
)
create table medications(
   id int primary key identity,
   name varchar(50)not null,
   category varchar(50),
   price decimal(10,2)not null,
   expiry_date date not null,
   stock_quantity int not null,
   supplier_id int,
   constraint fk_supplier_id foreign key(supplier_id) references suppliers(id)
  );
create table sales(
    id int primary key identity,
	customer_id int,
	medication_id int,
	quantity int not null,
	sales_date date not null default getdate(),
	total_price decimal(10,2) not null,
	constraint fk_customer_id foreign key(customer_id) references customers(id),
	constraint fk_medication_id foreign key(medication_id) references medications(id)
)
create table inventory(
   id int  primary key identity,
   medication_id int,
   supplier_id int,
   stock_in int ,
   stock_out int,
   date_added date default getdate(),
   constraint fk_inventory_medication_id foreign key(medication_id) references medications(id),
   constraint fk_inventory_supplier_id foreign key(supplier_id) references suppliers(id)
   )

-----1.Insert Operation (Basic Data Entry):---
CREATE PROCEDURE addsupplier
    @name VARCHAR(50),
    @phone_number VARCHAR(20),
    @email VARCHAR(50),
    @address VARCHAR(100),
    @contact_person VARCHAR(50)
AS
BEGIN
    INSERT INTO suppliers (name, phone_number, email, address, contact_person)
    VALUES (@name, @phone_number, @email, @address, @contact_person);
END;

EXEC addsupplier @name = 'healthcorp', @phone_number = '123-456-7890', 
    @email = 'contact@healthcorp.com', @address = '123 health street, city', @contact_person = 'jane smith';

INSERT INTO suppliers (name, phone_number, email, address, contact_person)
VALUES 
       ('MediSupply', '234-567-8901', 'support@medisupply.com', '456 Supplier Road, City', 'Tom Johnson');
SELECT * FROM suppliers;

create procedure addmedicine
   @name VARCHAR(50),
    @category VARCHAR(50),
    @price DECIMAL(10, 2),
    @expiry_date DATE,
    @stock_quantity INT,
    @supplier_id INT  -- Optional supplier_id, default is NULL
AS
BEGIN
    INSERT INTO medications (name, category, price, expiry_date, stock_quantity, supplier_id)
    VALUES (@name, @category, @price, @expiry_date, @stock_quantity, @supplier_id);
END;

exec addmedicine @name = 'Paracetamol', 
    @category = 'Pain Relief', 
    @price = 2.50, 
    @expiry_date = '2025-12-31', 
    @supplier_id = 1, 
    @stock_quantity = 100; 

	INSERT INTO medications (name, category, price, expiry_date, stock_quantity, supplier_id)
VALUES 
       ('Ibuprofen', 'Anti-inflammatory', 5.00, '2024-10-31', 200, 1),
       ('Aspirin', 'Blood Thinner', 1.50, '2024-11-15', 150, 1),
       ('Amoxicillin', 'Antibiotic', 10.00, '2023-11-20', 50, 2);

CREATE PROCEDURE addcustomer
    @name VARCHAR(50),
    @phone_number VARCHAR(20),
    @email VARCHAR(50),
    @address VARCHAR(100)
AS
BEGIN
    INSERT INTO customers (name, phone_number, email, address)
    VALUES (@name, @phone_number, @email, @address);
END;

EXEC addcustomer @name = 'john doe', @phone_number = '987-654-3210',  
    @email = 'john.doe@example.com', @address = '456 customer lane, town';

	INSERT INTO customers (name, phone_number, email, address)
VALUES 
       ('Alice Smith', '345-678-9012', 'alice.smith@example.com', '789 Customer Avenue, City'),
       ('Bob Martin', '567-890-1234', 'bob.martin@example.com', '123 Main Street, City');
SELECT * FROM CUSTOMERS;


select * from medications;

INSERT INTO sales (customer_id, medication_id, quantity, sales_date, total_price)
VALUES (1, 5 ,10, '2024-09-15', 25.00), 
       (2, 6, 5, '2024-09-16', 25.00),   
       (3, 5, 20, '2024-09-18', 30.00)  
       
INSERT INTO inventory (medication_id, supplier_id, stock_in, stock_out, date_added)
VALUES (5, 1, 100, 10, '2024-09-15'),
       (5, 2, 200, 5, '2024-09-16'),
       (5, 1, 150, 20, '2024-09-18'),
       (6, 2, 50, 5, '2024-09-20');

select * from inventory;



--------update---
UPDATE medications
SET stock_quantity = stock_quantity + 50
WHERE name = 'Paracetamol';
select * from medications where name='Paracetamol';

----join---
create view list_medicine_suppliers
as
 select medications.id as medicine_id,
        medications.name as medicine_name,
		medications.category,
		medications.price,
		medications.stock_quantity,
		suppliers.name as supplier_name 
		from medications inner join suppliers on medications.supplier_id = suppliers.id;

select * from list_medicine_suppliers;

create view sales_data
as
	select sales.id as sales_id,
	       sales.total_price as amount_of_sale,
		   medications.name as medication_name,
		   customers.name as customer_name
		   from sales inner join medications on sales.medication_id= medication_id inner join customers on sales.customer_id =customers.id;

select * from sales_data;

----select and fiter----
select * from sales where  sales_date >= DATEADD(day,-30,GETDATE());

select * from sales inner join customers on customers.id= sales.customer_id where customers.name = 'Alice Smith';

select * from medications  where expiry_date <=DATEADD(day,60,GETDATE());
----AGGREGATE FUNCTIONS---
/*Q11: Write a query to calculate the total revenue generated by sales in the month of September.
Q12: Write a query to get the total quantity of each medication sold (group by medication).
Q13: Write a query to count the total number of customers who have made purchases.

*/
select sum(total_price) from  sales where sales_date >='01-09-2024' and sales_date <='01-10-2024';

select medications.name as medication_name,sum(sales.quantity) as total_quantity from medications inner join sales on medications.id= sales.medication_id  group by medications.name;

select count(sales.customer_id) as total_customers from sales;
-------DELETE OPERATIONS---
/*Q14: Write a DELETE query to remove all medications that have expired as of today.
Q15: Write a query to delete a customer who has requested to be removed from the database.
*/
delete from medications where expiry_date < GETDATE();
---medication_id should be deleted first;
delete from  customers where id = 4;

select * from customers;

--- Transaction Management (Sales and Stock Update):-----
/* When a customer purchases a medication, the following operations should be performed:
Insert a new record into the sales table.
Update the medications table to reduce the stock quantity of the purchased medication.
*/
create procedure stock_update
      @customer_id int, 
	  @medication_id int ,
	  @quantity int ,
	  @total_price decimal(10,2) 

as
begin 
    insert into sales(customer_id,medication_id,quantity,sales_date,total_price) values(@customer_id,@medication_id,@quantity,getdate(),@total_price);
	update medications set stock_quantity = stock_quantity-@quantity where id= @medication_id;
end;

 exec stock_update @customer_id =1, @medication_id = 5, @quantity =5, @total_price =50.00;
 
 select * from medications where id = 5;
 select * from sales where sales.medication_id = 5;
    













   
